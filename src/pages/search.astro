---
import { SearchIcon } from "lucide-react";

import SearchInput from "~/components/search-input.astro";
import { buttonVariants } from "~/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "~/components/ui/card";
import { Separator } from "~/components/ui/separator";
import Layout from "~/layouts/layout.astro";
import { getFaviconUrl, search } from "~/lib/searxng";
import { cn } from "~/lib/utils";

const start = performance.now();

const query = Astro.url.searchParams.get("q") ?? "";
const { results, suggestions, infoboxes } = await search(query);

type Infobox = Awaited<ReturnType<typeof search>>["infoboxes"][number] & {
  img_src?: string;
  attributes?: {
    label: string;
    value: string;
  }[];
  urls?: {
    title: string;
    url: string;
  }[];
};

const end = performance.now();
---

<Layout>
  <header class="border-b pt-6">
    <div class="grid grid-cols-[6rem_1fr] gap-6 pl-10">
      <div class="flex items-center">
        <a class="font-heading text-2xl font-semibold tracking-[-3%]" href="/">
          Queryly
        </a>
      </div>
      <div class="flex w-full max-w-screen-sm">
        <SearchInput initialQuery={query} />
      </div>
      <nav class="col-start-2 flex items-end">
        <p class="border-b-2 border-foreground">General</p>
      </nav>
    </div>
  </header>
  <main class="flex flex-1 space-x-8 py-8 pl-40 pr-8">
    <div class="flex max-w-screen-sm flex-col space-y-6">
      {
        results.map((result) => (
          <article class="flex flex-col space-y-1">
            <a
              href={result.url}
              rel="noreferrer"
              class="flex flex-col space-y-1 text-blue-600 visited:text-purple-600 dark:text-blue-300 dark:visited:text-purple-300"
            >
              <div class="group flex items-center space-x-2">
                <img
                  src={getFaviconUrl(new URL(result.url).hostname)}
                  alt=""
                  class="h-4 w-4 rounded-sm"
                />
                <span class="text-xs text-muted-foreground underline-offset-4 group-hover:underline">
                  {result.url}
                </span>
              </div>
              <h3 class="text-lg font-medium underline-offset-4 hover:underline">
                {result.title}
              </h3>
            </a>
            <div class="flex space-x-2">
              {result.thumbnail && (
                <img src={result.thumbnail} alt={result.title} class="h-full" />
              )}
              <p class="max-w-screen-sm break-words text-sm">
                {result.content}
              </p>
            </div>
          </article>
        ))
      }
      {
        suggestions.length > 0 && (
          <>
            <Separator />
            <div class="flex flex-col space-y-3">
              <span class="text-lg font-medium">Suggestions</span>
              <div class="grid grid-cols-2 gap-2">
                {suggestions.map((suggestion) => {
                  const params = Astro.url.searchParams;
                  params.set("q", suggestion);
                  const url = `/search?${params.toString()}`;
                  return (
                    <a
                      href={url}
                      class={cn(
                        buttonVariants({
                          variant: "outline",
                          className:
                            "justify-between rounded-md px-3 py-3 font-normal",
                        })
                      )}
                    >
                      {suggestion}
                      <SearchIcon className="text-muted-foreground" />
                    </a>
                  );
                })}
              </div>
            </div>
          </>
        )
      }
      <p class="text-xs text-muted-foreground">
        Took {Math.round(end - start)}ms to fetch results
      </p>
    </div>
    {
      infoboxes.length > 0 && (
        <div class="flex max-w-96 flex-col space-y-6">
          {infoboxes.map(
            ({ infobox, content, img_src, attributes, urls }: Infobox) => (
              <Card>
                <CardHeader className="space-y-4">
                  <CardTitle>{infobox}</CardTitle>
                  <img src={img_src} alt={infobox} />
                </CardHeader>
                <CardContent className="space-y-3 text-sm">
                  <p>{content}</p>
                  {attributes && attributes.length > 0 && (
                    <ul class="space-y-1">
                      {attributes.map(({ label, value }) => (
                        <li>
                          <span class="font-bold">{label}</span>: {value}
                        </li>
                      ))}
                    </ul>
                  )}
                  {urls && urls.length > 0 && (
                    <div class="flex flex-col space-y-1">
                      <span class="font-bold">Links</span>
                      <ul class="ml-6 list-disc space-y-1">
                        {urls.map(({ title, url }) => (
                          <li>
                            <a
                              href={url}
                              class="text-blue-600 underline-offset-4 visited:text-purple-600 hover:underline dark:text-blue-300 dark:visited:text-purple-300"
                            >
                              {title}
                            </a>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </CardContent>
              </Card>
            )
          )}
        </div>
      )
    }
  </main>
  <Separator />
</Layout>
