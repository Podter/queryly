---
import type { LucideIcon } from "lucide-react";
import type { SearxngCategory } from "searxng";
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  FilesIcon,
  GraduationCap,
  ImageIcon,
  Layers,
  MapPin,
  Music,
  Newspaper,
  SearchIcon,
  SquarePlay,
  UsersRound,
} from "lucide-react";

import AIOverviews from "~/components/ai-overviews";
import ScrollToTop from "~/components/scroll-to-top.astro";
import SearchInput from "~/components/search-input";
import ThemeToggle from "~/components/theme-toggle.astro";
import { buttonVariants } from "~/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "~/components/ui/card";
import { Separator } from "~/components/ui/separator";
import Layout from "~/layouts/layout.astro";
import { getFaviconUrl, search } from "~/lib/searxng";
import { cn } from "~/lib/utils";

const CATEGORIES: Partial<
  Record<
    SearxngCategory,
    {
      label: string;
      icon: LucideIcon;
    }
  >
> = {
  general: {
    label: "General",
    icon: SearchIcon,
  },
  // images: {
  //   label: "Images",
  //   icon: ImageIcon,
  // },
  videos: {
    label: "Videos",
    icon: SquarePlay,
  },
  news: {
    label: "News",
    icon: Newspaper,
  },
  map: {
    label: "Map",
    icon: MapPin,
  },
  music: {
    label: "Music",
    icon: Music,
  },
  it: {
    label: "It",
    icon: Layers,
  },
  science: {
    label: "Science",
    icon: GraduationCap,
  },
  files: {
    label: "Files",
    icon: FilesIcon,
  },
  social_media: {
    label: "Social Media",
    icon: UsersRound,
  },
};

const start = performance.now();

const query = Astro.url.searchParams.get("q") ?? "";
const pageNum = Number(Astro.url.searchParams.get("p") ?? "1");
const category =
  (Astro.url.searchParams.get("category") as SearxngCategory | null) ??
  "general";
const { results, suggestions, infoboxes } = await search(query, {
  pageno: pageNum,
  categories: [category],
});

function prevPage() {
  const params = new URLSearchParams(Astro.url.searchParams);
  params.set("p", Math.max(1, pageNum - 1).toString());
  return `/search?${params.toString()}`;
}

function nextPage() {
  const params = new URLSearchParams(Astro.url.searchParams);
  params.set("p", (pageNum + 1).toString());
  return `/search?${params.toString()}`;
}

type Infobox = Awaited<ReturnType<typeof search>>["infoboxes"][number] & {
  img_src?: string;
  attributes?: {
    label: string;
    value: string;
  }[];
  urls?: {
    title: string;
    url: string;
  }[];
};

const end = performance.now();
---

<Layout
  title={`${query} - Queryly`}
  description={`Search results for ${query} on Queryly.`}
>
  <header
    class="sticky top-0 z-50 border-b border-[#0a0a0a1a] bg-background/50 pt-6 backdrop-blur-md dark:border-[#e5e5e526]"
  >
    <ThemeToggle className="absolute right-3 top-3" />
    <div
      class="grid grid-cols-1 gap-4 xl:grid-cols-[6rem_1fr] xl:gap-6 xl:px-8 xl:pl-10"
    >
      <div class="flex items-center justify-center">
        <a class="font-heading text-2xl font-semibold tracking-[-3%]" href="/">
          Queryly
        </a>
      </div>
      <div class="flex w-full justify-center px-8 xl:justify-start xl:px-0">
        <div class="flex w-full max-w-screen-sm">
          <SearchInput initialQuery={query} client:load />
        </div>
      </div>
      <div class="flex w-full justify-center xl:col-start-2 xl:justify-start">
        <nav
          class="flex items-end space-x-4 overflow-scroll px-8 scrollbar-hide xl:px-0"
        >
          {
            Object.entries(CATEGORIES).map(
              ([categoryName, { label, icon: Icon }]) => {
                const params = new URLSearchParams(Astro.url.searchParams);
                params.set("category", categoryName);
                const url = `/search?${params.toString()}`;
                return (
                  <a
                    href={url}
                    class={cn(
                      "inline-flex items-center gap-1 whitespace-nowrap border-b-2 pb-0.5 text-sm",
                      category === categoryName
                        ? "border-foreground"
                        : "border-transparent text-neutral-700 transition-colors hover:border-foreground hover:!text-foreground dark:text-neutral-300",
                    )}
                  >
                    <Icon size={14} />
                    {label}
                  </a>
                );
              },
            )
          }
        </nav>
      </div>
    </div>
  </header>
  <main
    class="flex flex-1 justify-center space-x-8 py-8 pl-8 pr-8 xl:justify-between xl:pl-40"
  >
    <!-- TODO: fix the text overflow -->
    <div
      class="flex flex-col-reverse gap-6 overflow-hidden text-ellipsis xl:flex-row xl:gap-8"
    >
      <div class="flex max-w-screen-sm flex-col space-y-6">
        {
          pageNum === 1 && category === "general" && (
            <AIOverviews {query} client:load />
          )
        }
        {
          results.length > 0 ? (
            results.map((result) => {
              const re = new RegExp(query, "gi");
              const content = result.content?.replace(
                re,
                `<strong>$&</strong>`,
              );
              return (
                <article class="flex flex-col space-y-1">
                  <a
                    href={result.url}
                    rel="noreferrer"
                    class="flex flex-col space-y-1 text-blue-700 visited:text-purple-700 dark:text-blue-300 dark:visited:text-purple-300"
                  >
                    <div class="group flex items-center space-x-2">
                      <img
                        src={getFaviconUrl(new URL(result.url).hostname)}
                        alt={new URL(result.url).hostname}
                        class="h-4 w-4 rounded-sm"
                        loading="lazy"
                        decoding="async"
                      />
                      <span class="break-all text-xs text-muted-foreground underline-offset-4 group-hover:underline">
                        {result.url}
                      </span>
                    </div>
                    <h3 class="text-lg font-medium underline-offset-4 hover:underline">
                      {result.title}
                    </h3>
                  </a>
                  <div class="flex space-x-2">
                    {result.thumbnail && (
                      <img
                        src={result.thumbnail}
                        alt={result.title}
                        class="h-full max-h-32 max-w-48"
                        loading="lazy"
                        decoding="async"
                      />
                    )}
                    <p
                      class="max-w-screen-sm break-words text-sm text-neutral-700 dark:text-neutral-300"
                      set:html={content}
                    />
                  </div>
                  <div class="flex flex-row-reverse justify-between text-xs text-muted-foreground">
                    <div class="flex gap-2">
                      {result.engines.map((engine) => (
                        <span>{engine}</span>
                      ))}
                    </div>
                    {result.publishedDate && (
                      <time datetime={result.publishedDate.toString()}>
                        {new Date(result.publishedDate).toLocaleDateString(
                          undefined,
                          {
                            year: "numeric",
                            month: "long",
                            day: "numeric",
                          },
                        )}
                      </time>
                    )}
                  </div>
                </article>
              );
            })
          ) : (
            <div class="flex flex-col items-center space-y-1">
              <p class="text-lg font-medium">No results found</p>
              <p class="text-muted-foreground">
                Try searching for something else
              </p>
            </div>
          )
        }
        {
          suggestions.length > 0 && (
            <>
              <Separator />
              <div class="flex flex-col space-y-3">
                <span class="text-lg font-medium">Suggestions</span>
                <div class="grid grid-cols-2 gap-2">
                  {suggestions.map((suggestion) => {
                    const params = new URLSearchParams(Astro.url.searchParams);
                    params.set("q", suggestion);
                    const url = `/search?${params.toString()}`;
                    return (
                      <a
                        href={url}
                        class={cn(
                          buttonVariants({
                            variant: "outline",
                            className:
                              "justify-between rounded-md px-3 py-3 font-normal",
                          }),
                        )}
                      >
                        <span class="overflow-hidden text-ellipsis">
                          {suggestion}
                        </span>
                        <SearchIcon className="text-muted-foreground" />
                      </a>
                    );
                  })}
                </div>
              </div>
            </>
          )
        }
        <div class="flex w-full justify-center space-x-2">
          {
            pageNum > 1 && (
              <a
                href={prevPage()}
                class={cn(
                  buttonVariants({
                    variant: "ghost",
                    size: "icon",
                  }),
                )}
              >
                <ChevronLeftIcon />
              </a>
            )
          }
          {
            Array.from({ length: 10 }, (_, i) => {
              const page = Math.max(1, pageNum - 3) + i;
              const params = new URLSearchParams(Astro.url.searchParams);
              params.set("p", page.toString());
              const url = `/search?${params.toString()}`;
              return (
                <a
                  href={url}
                  class={cn(
                    buttonVariants({
                      variant: page === pageNum ? "secondary" : "outline",
                      size: "icon",
                      className: i >= 5 ? "hidden xl:inline-flex" : "",
                    }),
                  )}
                >
                  {page}
                </a>
              );
            })
          }
          <a
            href={nextPage()}
            class={cn(
              buttonVariants({
                variant: "ghost",
                size: "icon",
              }),
            )}
          >
            <ChevronRightIcon />
          </a>
        </div>
        <p class="text-xs text-muted-foreground">
          Took {Math.round(end - start)}ms to fetch results
        </p>
      </div>
      {
        infoboxes.length > 0 && category === "general" && (
          <div class="flex max-w-screen-sm flex-col space-y-6 xl:max-w-96">
            {infoboxes.map(
              ({ infobox, content, img_src, attributes, urls }: Infobox) => (
                <Card>
                  <CardHeader className="space-y-4">
                    <CardTitle>{infobox}</CardTitle>
                    {img_src && (
                      <img
                        src={img_src}
                        alt={infobox}
                        loading="lazy"
                        decoding="async"
                      />
                    )}
                  </CardHeader>
                  <CardContent className="prose prose-sm prose-neutral dark:prose-invert">
                    <p>{content}</p>
                    {attributes && attributes.length > 0 && (
                      <ul>
                        {attributes.map(({ label, value }) => (
                          <li>
                            <strong>{label}</strong>: {value}
                          </li>
                        ))}
                      </ul>
                    )}
                    {urls && urls.length > 0 && (
                      <>
                        <p>
                          <strong>Links</strong>
                        </p>
                        <ul>
                          {urls.map(({ title, url }) => (
                            <li>
                              <a
                                href={url}
                                class="text-blue-700 no-underline underline-offset-4 visited:text-purple-700 hover:underline dark:text-blue-300 dark:visited:text-purple-300"
                              >
                                {title}
                              </a>
                            </li>
                          ))}
                        </ul>
                      </>
                    )}
                  </CardContent>
                </Card>
              ),
            )}
          </div>
        )
      }
    </div>
    <div class="relative hidden xl:flex">
      <ScrollToTop className="sticky top-[calc(100vh-2.5rem-2rem)]" />
    </div>
  </main>
  <Separator />
</Layout>
